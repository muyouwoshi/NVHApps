package draw.map;

import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import left.drawer.AnalogFragment;
import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Canvas;
import android.util.Log;
import bottom.drawer.AddChannelViewPager;

import com.calculate.Arith_AI;
import com.calculate.Arith_RPM;
import com.example.mobileacquisition.MainActivity;
import com.example.mobileacquisition.Ruler;
import common.DataCollection;
import common.IAudioTrack;
import common.MyViewPager;
import common.ScaleView;

public class AI extends ScaleView {
	private Ruler ruler;
	private float maxValue;
	private float px = 100;
	private float x = 102;
	private float py = 0;
	private float y = 0;
	private int[] voiceData;
	private Arith_AI ai;
	private Arith_RPM rpm;
	private int skipcount = 0;// ����ʵת��ͨ�����ֺ�ɾ��
	private float[] rpmRange;// �л�Ϊrpm��ĺ���
	private float[] rpmData;// �л�Ϊrpm�������
	// private Activity context;
	private int xlabelSer;
	private ArrayList<List<Float>> AIBuffer;
	private ArrayList<int[]> AIBufferArray;
	private ArrayList<float[]> AIResultList = new ArrayList();
	private int count;
	private int lastIndex = -1;
	private int xsize;
	private boolean startToFindZero = true;
	private int j;
	private int channalCount;
	private static boolean ifStartToGetData = false;
	private static boolean ifEnterToDriverMode=false;
	private static int bufferIntListIndex;
	private int dataCollectionIntBufferListSize=-1;
	public AI(Context context) {
		super(context);
		// this.context = (Activity) context;
		ai = new Arith_AI();
		isFrist = true;
		// init();
	}

	public AI(Context context, MyViewPager viewPager) {
		super(context, viewPager);
		// this.context = (Activity) context;
		ai = new Arith_AI();
		isFrist = true;
		
		AIBuffer = new ArrayList<List<Float>>();
		AIBufferArray = new ArrayList<int[]>();
		channalCount = 8;
		for (int i = 0; i < channalCount; i++) {
			AIBuffer.add(new ArrayList<Float>());
		}
		// init();
		SharedPreferences preference = context.getSharedPreferences("hz_5D", 0);
		xlabelState = preference.getString("AI_XAxis", "s");
		ylabelState = preference.getString("AI_YAxis", "%");
		refreshLabelState();
	}

	public void init() {
		super.init();
		ybaseLine = viewh - 50;

		divider = 2.0f; // ÿ���������ػ�һ����
		offsetX = 0.002f; // ÿ�����0.002��
		xmultiple = offsetX / divider; // ÿpx���0.001��;

		ymultiple = (float) (10000.0 / (viewh - 50));
		float ygrid = 100 / ymultiple;

		int n = 0;
		while (ymultiple / (int) Math.pow(2, n) >= 1) {
			n += 1;
		}

		yGrid = ((int) Math.pow(2, n)) * ygrid;
		ymultiple = ymultiple / 100;
		if (yGrid > xGrid) {
			yGrid = yGrid / 2;
			// ymultiple = ymultiple/2;
		}	
	}

	protected void onSizeChanged(int w, int h, int oldw, int oldh) {

		super.onSizeChanged(w, h, oldw, oldh);
	}

	@Override
	protected void onDraw(Canvas canvas) {
		super.onDraw(canvas);
		if (context.getClass().getSimpleName().equals("MainActivity")) {
			boolean ifRecording=DataCollection.isRecording;
			if (DataCollection.isRecording || DataCollection.collectionState == 1) {
				if (DataCollection.dataCollectionIntBufferList != null
						&& DataCollection.dataCollectionIntBufferList.size() != 0) {
					if (DataCollection.collectionState == 0) {
						if (!ifStartToGetData||ifEnterToDriverMode) {
							if (AIBuffer.get(0).size() > 0) {
								for (int i = 0; i <= lastIndex; i++) {
									AIBuffer.get(i).clear();
								}
								if(!ifEnterToDriverMode) changeX = 0;
							}
							ifStartToGetData = true;
							ifEnterToDriverMode=false;
						}
						if (bufferIntListIndex < DataCollection.dataCollectionIntBufferList.size()) {
							int[] testdata = ((ArrayList<int[]>) DataCollection.dataCollectionIntBufferList)
									.get(bufferIntListIndex);
							getBuffer(testdata, canvas);
							bufferIntListIndex += 1;
						}
					} else if (DataCollection.collectionState == 1 && ifStartToGetData == true) {
						if(dataCollectionIntBufferListSize==-1){
							dataCollectionIntBufferListSize=DataCollection.dataCollectionIntBufferList.size();
						}
//						if (bufferIntListIndex >= dataCollectionIntBufferListSize) {
							DataCollection.collectionOverCalculateCount += 1;
							bufferIntListIndex = 0;
							ifStartToGetData = false;
							ai.resetResult();
//						} else {
//							ai.resetResult();
//							int[] testdata = ((ArrayList<int[]>)DataCollection.dataCollectionIntBufferList)
//									.get(bufferIntListIndex);
//							getBuffer(testdata, canvas);
//							bufferIntListIndex += 1;
//						}
					}
				}
			} else {
				try {
					if (IAudioTrack.readState == 3) {
						IAudioTrack.audioOverCalculateCount += 1;
						bufferIntListIndex = 0;
						ifStartToGetData = false;
					}
					if (IAudioTrack.readState == 0) {
						if (!ifStartToGetData) {
							if (AIBuffer.get(0).size() > 0) {
								for (int i = 0; i <= lastIndex; i++) {
									AIBuffer.get(i).clear();
								}
								changeX = 0;
							}
							ifStartToGetData = true;
						}
						if (bufferIntListIndex < IAudioTrack.mAudioTrackIntBufferList.size()) {
							int[] testdata = ((ArrayList<int[]>) IAudioTrack.mAudioTrackIntBufferList)
									.get(bufferIntListIndex);
							getBuffer(testdata, canvas);
							bufferIntListIndex += 1;
						}
					} else if (IAudioTrack.readState == 1 && ifStartToGetData == true) {
						if (IAudioTrack.readState == 3) {
							IAudioTrack.audioOverCalculateCount += 1;
							bufferIntListIndex = 0;
							ifStartToGetData = false;
						}
						if (IAudioTrack.readState == 1) {
							if (bufferIntListIndex >= IAudioTrack.mAudioTrackIntBufferList.size()) {
								IAudioTrack.audioOverCalculateCount += 1;
								bufferIntListIndex = 0;
								ifStartToGetData = false;
							} else {
								int[] testdata = ((ArrayList<int[]>) IAudioTrack.mAudioTrackIntBufferList)
										.get(bufferIntListIndex);
								getBuffer(testdata, canvas);
								bufferIntListIndex += 1;
							}
						}
					}
				} catch (Exception e) {
					System.out.println(e);
				}
			}
		} else if (context.getClass().getSimpleName().equals("DriveModeActivity")) {
			ifEnterToDriverMode=true;
			if (AddChannelViewPager.drive_channelCount.size() == 0)
				return;
			if (DataCollection.isRecording || DataCollection.collectionState == 1) {
				if (DataCollection.dataCollectionIntBufferList != null
						&& DataCollection.dataCollectionIntBufferList.size() != 0) {
					if (DataCollection.collectionState == 0) {
						if (!ifStartToGetData) {
							if (AIBuffer.get(0).size() > 0) {
								for (int i = 0; i <= lastIndex; i++) {
									AIBuffer.get(i).clear();
								}
								changeX = 0;
							}
							ifStartToGetData = true;
						}
						if (bufferIntListIndex < DataCollection.dataCollectionIntBufferList.size()) {
							int[] testdata = ((ArrayList<int[]>) DataCollection.dataCollectionIntBufferList)
									.get(bufferIntListIndex);
							getBuffer(testdata, canvas);
							bufferIntListIndex += 1;
						}
					} else if (DataCollection.collectionState == 1 && ifStartToGetData == true) {
//						if (bufferIntListIndex >= DataCollection.dataCollectionIntBufferList.size()) {
							DataCollection.collectionOverCalculateCount += 1;
							bufferIntListIndex = 0;
							ifStartToGetData = false;
							ai.resetResult();
//						} else {
//							int[] testdata = ((ArrayList<int[]>)DataCollection.dataCollectionIntBufferList)
//									.get(bufferIntListIndex);
//							getBuffer(testdata, canvas);
//							bufferIntListIndex += 1;
//						}
					}
				}
			}
		}

		if (AIBuffer == null || AIBuffer.size() <= 0 || lastIndex < 0) {
			return;
		}
		canvas.save();
		canvas.clipRect(left, 0, vieww, viewh - 50);

		getAutoRate((ArrayList<Float>) AIBuffer.get(0), ybaseLine);
		for (int i = 0; i < AIBuffer.get(lastIndex).size() - 1; i++) {
			int index = 0;
			while (index < activityChannelArray.length) {
				if (activityChannelArray[index] == 0) {
					index++;
					continue;
				}
				List<Float> dataList = AIBuffer.get(index);
				if (dataList.size() - 1 <= i) {
					index++;
					continue;
				}

				py = ybaseLine - dataList.get(i) * syrate / ymultiple;
				px = xbaseLine + i * sxrate * divider;
				y = ybaseLine - dataList.get(i + 1) * syrate / ymultiple;
				x = px + sxrate * divider;
				if (paintList != null && paintList.size() > 0) {
					if (index + 1 > paintList.size()) {
						canvas.drawLine(px, py, x, y, paintList.get(0));
					} else {
						canvas.drawLine(px, py, x, y, paintList.get(index));
					}
				}
				index++;
			}
			// ------------------����--------------
		}
		canvas.restore();
	}

	@Override
	protected void getDataResult(int channelNum) {
		// TODO Auto-generated method stub
		if (channelNum > AIBuffer.size())
			return;
		if (AIBuffer != null && channelNum != -1 && AIBuffer.get(channelNum).size() > 0) {
			resultDatalist = (ArrayList) AIBuffer.get(channelNum);

		}
	}

	private void getAutoRate(ArrayList<Float> list, float ybase) {
		if (list.size() == 0)
			return;
		maxValue = list.get(0) / ymultiple;
		int i = 0;
		while (i < list.size()) {
			float value = list.get(i) / ymultiple;
			if (value < 0)
				value = 0 - value;
			if (value > maxValue)
				maxValue = value;
			i++;
		}
		if (isAuto) {
			if ((ybase * 0.8 / maxValue) >= 1 && (ybase * 0.8 / maxValue) <= 100) {
				syrate = (float) (ybase * 0.8 / maxValue);
			} else if ((ybase * 0.8 / maxValue) > 100) {
				syrate = 100;
			} else
				syrate = 1;
		}
	}

	private void getBuffer(int[] Buffer, Canvas canvas) {
		if (Buffer == null)
			return;
		switch (hardType) {
		case 0:// Ӳ��ģʽ
				// �Ի�ȡһ�������һ����ķ�ʽ���ӿ��ͼ��Ч��

			int xsize = 0;
			for (int i = 0; i < Buffer.length / channalCount; i++) {
				count = 0;
				int data = 0;
				int bufferData = 0;
				List<Integer> lineBufferList = null;
				while (count < checkedChannelIndexArray.length) {
					if (checkedChannelIndexArray[count] == 0) {
						if (AIBufferArray.size() < count + 1) {
							AIBufferArray.add(new int[1]);
						}
						count++;
						continue;
					} else {
						lastIndex = count;
					}
					int bufferindex = i * channalCount + count;
					bufferData = Buffer[bufferindex];
					if (AIBufferArray.size() < count + 1) {
						AIBufferArray.add(new int[Buffer.length / channalCount]);
					}
					AIBufferArray.get(count)[xsize] = bufferData;
					count++;
				}
				xsize++;
			}
			int index = 0;
			while (index < checkedChannelIndexArray.length) {
				if (checkedChannelIndexArray[index] == 0) {
					if (AIResultList.size() < index + 1) {
						AIResultList.add(new float[1]);
					}
					index++;
					continue;
				}
				int[] dataArray = AIBufferArray.get(index);
				ai.calculate(dataArray, dataArray.length);
				float[] AIResult = ai.getAi_Time(0);
				if (AIResultList.size() < index + 1) {
					AIResultList.add(AIResult);
				} else {
					AIResultList.set(index, AIResult);
				}
				index++;
			}

			index = 0;
			for (int j = 0; j < AIResultList.get(lastIndex).length; j++) {
				index = 0;
				while (index < checkedChannelIndexArray.length) {
					if (checkedChannelIndexArray[index] == 0) {
						index++;
						continue;
					}
					List<Float> lineList = AIBuffer.get(index);
					float[] lineArray = AIResultList.get(index);
					if (lineArray.length <= j) {
						index++;
						continue;
					}
					double data = lineArray[j];
					if (ylabelState != null && ylabelState.equals("Pa")) {
						// //////////// 16.3.8 ��ά�� -begin
						// TODO ��� ͨ�����ã����������˵�ѡ��0 = p0��1 = a0����Ӧ�İ������2*p0����
						// ����֤

						AnalogFragment.ViewHolder holder = AnalogFragment.checkedViewMap.get(index);
						String physical = holder.Physical.getSelectedItem().toString();

						if ("Noise".equals(physical)) {
							data = (2 * p0) * (Math.pow(10, (data / 20)));
						} else if ("Vibration".equals(physical)) {
							data = (2 * a0) * (Math.pow(10, (data / 20)));
						}
						// /////////// -end
					}
					lineList.add((float) data);
					if (lineList.size() > (canvas.getWidth() - 50) / divider) {
						lineList.remove(0);
					}

					// // ����RPMת��
					// if (xlabelState != null && xlabelState.equals("RPM")) {
					// if (DataCollection.rpmdata == null) {
					// return;
					// }
					// if (rpm == null) {
					// rpm = new Arith_RPM();
					// }
					// rpm.InitTacho(32768);// ����ʵת��ͨ�����ֺ��޸Ĵ˲���˲���Ϊ������
					// if (rpm.ifHaveCalcTachoResult(32768,
					// DataCollection.rpmdata, DataCollection.rpmdata.length)) {
					// rpmRange = rpm.getRPMRange();
					// rpmData = rpm.getRPMAIData(lineArray, 1);//
					// 1�����ȡ�ģ����������ʱ��������֪����ô��
					// Log.v("bug11", rpmRange.length + "rpmRange.length");
					// Log.v("bug11", rpmData.length + "rpmData.length");
					// }
					// }
					// // ���
					index++;
				}
			}
			break;
		case 1:// �ֻ�ģʽ
			lastIndex = 0;
			ai.calculate(Buffer, Buffer.length);
			float[] AIResultData = ai.getAi_Time(0);
			if (AIResultData.length != 0) {
				for (int j = 0; j < AIResultData.length; j++) {
					AIBuffer.get(0).add(AIResultData[j]);
					if (AIBuffer.get(0).size() > (canvas.getWidth() - 50) / divider) {
						AIBuffer.get(0).remove(0);
						changeX += offsetX;
					}
				}
			}
			break;
		}
	}

	private String getUnit() {
		return context.getSharedPreferences("hz_5D", 0).getString("AI_XAxis", "s");
	}

	@Override
	public List<Float> getCursorValue(float moveX) {
		// TODO Auto-generated method stub
		List<Float> list = new ArrayList<Float>();

		float xValue = 0;
		float yValue = 0;
		float yPosition = ybaseLine;

		getDataResult(cursorNum);
		if (divider == 0 || xlabelState == null || ylabelState == null || cursorNum == -1) {
			list.add(xValue);
			list.add(yValue);
			list.add(yPosition);
			return list;
		}

		xValue = ((moveX - xbaseLine + 50) / sxrate) * xmultiple + changeX;

		if ("s".equals(xlabelState)) {
			xlabelState = "s";
		} else if ("ms".equals(xlabelState)) {
			xValue = xValue * 1000;
			xlabelState = "ms";
		} else if ("Hz".equals(xlabelState)) {
			xlabelState = "Hz";
			xValue = moveX * xmultiple / sxrate;
		} else if ("RPM".equals(xlabelState)) {
			xlabelState = "RPM";
			// xValue = moveX;
		}

		int x = (int) ((moveX - xbaseLine + 50) / divider / sxrate);

		if (resultDatalist != null && resultDatalist.size() > 0) {
			if (x < resultDatalist.size() && x > 0) {
				yValue = Float.parseFloat(resultDatalist.get(x).toString());

			} else if (x >= resultDatalist.size()) {
				yValue = Float.parseFloat(resultDatalist.get(resultDatalist.size() - 1).toString());
			} else if (x == 0) {
				yValue = (Float.parseFloat(resultDatalist.get(0).toString()));
			}
		}

		yPosition = ybaseLine - yValue / ymultiple * syrate;

		if ("Pa".equals(ylabelState)) {
			yValue = yValue / 100;
		} else {
			yValue = yValue;
		}

		// if(cursorNum == 0){
		// xValue = 1;
		// yValue = 1;
		//
		// }
		//
		// else if(cursorNum ==1){
		// xValue = 2;
		// yValue = 2;
		// }
		// else if(cursorNum ==2){
		// xValue = 3;
		// yValue = 3;
		// }
		// else if(cursorNum ==3){
		// xValue = 4;
		// yValue = 4;
		// }

		list.add(xValue);
		list.add(yValue);
		list.add(yPosition);
		return list;
	}

}
