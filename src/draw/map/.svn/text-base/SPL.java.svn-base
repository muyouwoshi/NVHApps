package draw.map;

import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import com.calculate.Arith_FFT;
import com.calculate.Arith_RPM;
import com.calculate.Arith_SPL;
import com.example.mobileacquisition.MainActivity;

import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Canvas;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.widget.Toast;
import bottom.drawer.AddChannelViewPager;
import common.DataCollection;
import common.IAudioTrack;
import common.MyViewPager;
import common.ScaleView;
import common.XclSingalTransfer;
import left.drawer.AnalogFragment;
import mode.calibration.CalibrationDataCollection;

public class SPL extends ScaleView {
	public final static int MODE_NORMAL = 0;
	public final static int MODE_DRIVE = 1;
	public final static int MODE_CALIBRATION = 2;
	// private Ruler ruler;
	private double maxValue;
	private ArrayList<List<Double>> SPLBuffer;
	private ArrayList<int[]> SPLBufferArray = new ArrayList<int[]>();
	private List<double[]> SPLResultList = new ArrayList<double[]>();
	private float px, x;
	private float py = 0;
	private float y = 0;
	private int[] voiceData;
	private Arith_SPL spl;
	private int firstCalculation;
	private double max;
	private double[] maxArray = new double[2];
	private ArrayList<Double> peakValueList = new ArrayList<Double>();
	private Handler splPeakVauleHandler;
	// private Activity context;// 原为
	// MainActivity锟斤拷锟酵ｏ拷锟睫革拷为Acitivity锟斤拷锟酵ｏ拷锟斤拷为锟疥定锟斤拷锟斤拷也锟斤拷要锟矫达拷锟姐法锟斤拷锟斤拷锟皆诧拷应锟矫固讹拷为Main锟斤拷Activity
	private Handler splParamHandler;// spl锟姐法锟斤拷锟斤拷锟斤拷锟矫猴拷锟斤拷锟斤拷息
	private int xlabelSer;// 锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷每锟轿斤拷锟诫都锟斤拷锟斤拷愿锟较碉拷锟�
	private boolean startToFindZero = true;
	private int j;
	private int count;

	private int lastIndex = -1;
	private Arith_RPM rpm;
	private int skipcount = 0;// 锟斤拷锟斤拷实转锟斤拷通锟斤拷锟斤拷锟街猴拷删锟斤拷
	private float[] rpmRange;// 锟叫伙拷为rpm锟斤拷暮锟斤拷锟�
	private float[] rpmData;// 锟叫伙拷为rpm锟斤拷锟斤拷锟斤拷锟�
	private int channalCount;
	private static boolean ifStartToGetData = false;
	private static boolean ifEnterToDriverMode=false;
	private static int bufferIntListIndex;
	private boolean calibration = false;

	public SPL(Context context) {
		super(context);
		// this.context = (Activity) context;
		spl = new Arith_SPL();
		setSplParamHandler();
	}
	
	public SPL(Context context,int mode) {
		super(context);
		// this.context = (Activity) context;
		spl = new Arith_SPL();
		if(mode == MODE_CALIBRATION) calibration = true;
		setSplParamHandler();
	}

	public void init() {
		super.init();
		ybaseLine = viewh - 50;
		divider = 2.0f; // 每锟斤拷锟斤拷锟斤拷锟斤拷锟截伙拷一锟斤拷锟斤拷
		offsetX = 0.002f; // 每锟斤拷锟斤拷锟�0.002锟斤拷
		xmultiple = offsetX / divider; // 每px锟斤拷锟�0.001锟斤拷;
		ymultiple = 0.01f;
		SharedPreferences preference = context.getSharedPreferences("hz_5D", 0);

		if(xlabelState ==null)xlabelState = preference.getString("SPL_XAxis", "s");
		if (!calibration&&(ylabelState ==null)) {
			ylabelState = preference.getString("SPL_YAxis", "Pa");
		}

		refreshLabelState();
	}

	public SPL(Context context, MyViewPager viewPager) {
		super(context, viewPager);
		// this.context = (Activity) context;
		channalCount = 8;
		SPLBuffer = new ArrayList<List<Double>>();
		for (int i = 0; i < channalCount; i++) {
			SPLBuffer.add(new ArrayList<Double>());
		}
		spl = new Arith_SPL();
		setSplParamHandler();
	}

	@Override
	protected void onDraw(Canvas canvas) {

		super.onDraw(canvas);
		// 锟斤拷取锟斤拷锟斤拷模式
		if (context.getClass().getSimpleName().equals("MainActivity")) {
			// 未锟斤拷锟较伙拷锟剿碉拷锟斤拷选锟斤拷通锟斤拷锟侥伙拷锟斤拷锟结画图
			if (AddChannelViewPager.channelCount.size() == 0)
				return;

			if (DataCollection.isRecording || DataCollection.collectionState == 1) {
				if (DataCollection.dataCollectionIntBufferList != null
						&& DataCollection.dataCollectionIntBufferList.size() != 0) {
					if (DataCollection.collectionState == 0) {
						if (!ifStartToGetData||ifEnterToDriverMode) {
							if (SPLBuffer.get(0).size() > 0) {
								for (int i = 0; i <= lastIndex; i++) {
									SPLBuffer.get(i).clear();
								}
								if(!ifEnterToDriverMode) changeX = 0;
							}
							ifStartToGetData = true;
							ifEnterToDriverMode=false;
						}
						if (bufferIntListIndex < DataCollection.dataCollectionIntBufferList.size()) {
							int[] testdata = ((ArrayList<int[]>) DataCollection.dataCollectionIntBufferList)
									.get(bufferIntListIndex);
							getBuffer(testdata, canvas);
							bufferIntListIndex += 1;
						}
					} else if (DataCollection.collectionState == 1 && ifStartToGetData == true) {
						// if (bufferIntListIndex >=
						// DataCollection.dataCollectionIntBufferList.size()) {
						DataCollection.collectionOverCalculateCount += 1;
						bufferIntListIndex = 0;
						ifStartToGetData = false;
						spl.resetResult();
						// } else {
						// int[] testdata =
						// ((ArrayList<int[]>)DataCollection.dataCollectionIntBufferList)
						// .get(bufferIntListIndex);
						// getBuffer(testdata, canvas);
						// bufferIntListIndex += 1;
						// }
					}
				}
			} else {
				try {
					if (IAudioTrack.readState == 3) {
						IAudioTrack.audioOverCalculateCount += 1;
						bufferIntListIndex = 0;
						ifStartToGetData = false;
					}
					if (IAudioTrack.readState == 0) {
						if (!ifStartToGetData) {
							if (SPLBuffer.get(0).size() > 0) {
								for (int i = 0; i <= lastIndex; i++) {
									SPLBuffer.get(i).clear();
								}
								changeX = 0;
							}
							ifStartToGetData = true;
						}
						if (bufferIntListIndex < IAudioTrack.mAudioTrackIntBufferList.size()) {
							int[] testdata = ((ArrayList<int[]>) IAudioTrack.mAudioTrackIntBufferList)
									.get(bufferIntListIndex);
							getBuffer(testdata, canvas);
							bufferIntListIndex += 1;
						}
					} else if (IAudioTrack.readState == 1 && ifStartToGetData == true) {
						if (IAudioTrack.readState == 3) {
							IAudioTrack.audioOverCalculateCount += 1;
							bufferIntListIndex = 0;
							ifStartToGetData = false;
						}
						if (IAudioTrack.readState == 1) {
							if (bufferIntListIndex >= IAudioTrack.mAudioTrackIntBufferList.size()) {
								IAudioTrack.audioOverCalculateCount += 1;
								bufferIntListIndex = 0;
								ifStartToGetData = false;
							} else {
								int[] testdata = ((ArrayList<int[]>) IAudioTrack.mAudioTrackIntBufferList)
										.get(bufferIntListIndex);
								getBuffer(testdata, canvas);
								bufferIntListIndex += 1;
							}
						}
					}
				} catch (Exception e) {
					System.out.println(e);
				}
			}

		} else if (context.getClass().getSimpleName().equals("DriveModeActivity")) {
			if (AddChannelViewPager.drive_channelCount.size() == 0)
				return;
			if (DataCollection.isRecording || DataCollection.collectionState == 1) {
				if (DataCollection.dataCollectionIntBufferList != null
						&& DataCollection.dataCollectionIntBufferList.size() != 0) {
					if (DataCollection.collectionState == 0) {
						if (!ifStartToGetData) {
							if (SPLBuffer.get(0).size() > 0) {
								for (int i = 0; i <= lastIndex; i++) {
									SPLBuffer.get(i).clear();
								}
								changeX = 0;
							}
							ifStartToGetData = true;
						}
						if (bufferIntListIndex < DataCollection.dataCollectionIntBufferList.size()) {
							int[] testdata = ((ArrayList<int[]>) DataCollection.dataCollectionIntBufferList)
									.get(bufferIntListIndex);
							getBuffer(testdata, canvas);
							bufferIntListIndex += 1;
						}
					} else if (DataCollection.collectionState == 1 && ifStartToGetData == true) {
						// if (bufferIntListIndex >=
						// DataCollection.dataCollectionIntBufferList.size()) {
						DataCollection.collectionOverCalculateCount += 1;
						bufferIntListIndex = 0;
						ifStartToGetData = false;
						spl.resetResult();
						// } else {
						// int[] testdata =
						// ((ArrayList<int[]>)DataCollection.dataCollectionIntBufferList)
						// .get(bufferIntListIndex);
						// getBuffer(testdata, canvas);
						// bufferIntListIndex += 1;
						// }
					}
				}
			}
		} else if (context.getClass().getSimpleName().equals("CalibrationActivity")) {
			getBuffer(CalibrationDataCollection.buffer, canvas);
		}
		if (SPLBuffer == null || SPLBuffer.size() <= 0 || lastIndex < 0) {
			return;
		}
		getAutoRate((ArrayList<Double>) SPLBuffer.get(lastIndex), ybaseLine);

		for (int i = 0; i < SPLBuffer.get(lastIndex).size() - 1; i++) {
			int index = 0;
			while (index < activityChannelArray.length) {
				if (activityChannelArray[index] == 0) {
					index++;
					continue;
				}
				List<Double> dataList = SPLBuffer.get(index);
				if (dataList.size() - 1 <= i) {
					index++;
					continue;
				}
				canvas.save();
				canvas.clipRect(left, 0, vieww, viewh - 50);
				py = (float) (ybaseLine - dataList.get(i) * syrate / ymultiple);
				px = xbaseLine + i * sxrate * divider;
				y = (float) (ybaseLine - dataList.get(i + 1) * syrate / ymultiple);
				x = px + sxrate * divider;
				// ------------------锟疥定之spl锟斤拷值锟斤拷锟斤拷----------------
				if (splPeakVauleHandler != null) {
					if (firstCalculation < 2) {
						if (i <= SPLBuffer.size() - 2) {
							if (i > 0 && i < SPLBuffer.size() - 1) {
								if (dataList.get(i) > dataList.get(i - 1) && dataList.get(i) < dataList.get(i + 1)) {
									peakValueList.add(dataList.get(i));
								}
							}
						} else if (i == SPLBuffer.size() - 1) {
							max = Collections.max(peakValueList);
							maxArray[firstCalculation] = max;
							peakValueList.clear();
							firstCalculation++;
						}
					}
				}
				// ------------------锟斤拷锟斤拷---------------
				if (paintList != null && paintList.size() > 0) {
					if (index + 1 > paintList.size()) {
						canvas.drawLine(px, py, x, y, paintList.get(0));
					} else {
						canvas.drawLine(px, py, x, y, paintList.get(index));
					}
				}

				// 锟矫碉拷锟斤拷锟竭伙拷锟斤拷一锟斤拷锟斤拷锟侥�

				// ------------------锟疥定之spl锟斤拷值锟斤拷锟斤拷----------------
				if (splPeakVauleHandler != null) {
					if (firstCalculation == 2) {
						double sum = 0;
						for (int j = 0; j < SPLBuffer.size(); j++) {
							sum = sum + (maxArray[0] - maxArray[1]) * (maxArray[0] - maxArray[1]);
						}
						if (sum < 1.0) {// 锟斤拷锟诫即为锟饺讹拷状态
							double realPeakValue = maxArray[1];
							Message realPeakValueMessage = splPeakVauleHandler.obtainMessage();
							realPeakValueMessage.obj = realPeakValue;
							splPeakVauleHandler.sendMessage(realPeakValueMessage);
						} else {
							firstCalculation = 0;
						}
					}
				}
				canvas.restore();
				// ------------------锟斤拷锟斤拷---------------
				index++;
			}
		}
	}

	@Override
	protected void getDataResult(int channelNum) {
		// TODO Auto-generated method stub
		if (channelNum > SPLBuffer.size())
			return;
		if (SPLBuffer != null && channelNum != -1 && SPLBuffer.get(channelNum).size() > 0) {
			resultDatalist = (ArrayList<Double>) SPLBuffer.get(channelNum);
		}
	}

	private void getAutoRate(ArrayList<Double> list, float ybase) {

		if (list.size() == 0)
			return;
		maxValue = list.get(0) / ymultiple;
		int i = 0;
		while (i < list.size()) {
			double value = list.get(i) / ymultiple;
			if (value < 0)
				value = 0 - value;
			if (value > maxValue)
				maxValue = value;
			i++;
		}
		if (isAuto) {

			if ((ybase * 0.8 / maxValue) >= 1 && (ybase * 0.8 / maxValue) <= 100) {
				syrate = (float) (ybase * 0.8 / maxValue);
			} else if ((ybase * 0.8 / maxValue) > 100) {
				syrate = 100;
			} else
				syrate = 1;
		}
	}

	private void getBuffer(int[] Buffer, Canvas canvas) {
		if (Buffer == null || Buffer.length < channalCount)
			return;
		// 锟斤拷取锟斤拷锟�
		switch (hardType) {
		case 0:// 硬锟斤拷模式
			int xsize = 0;
			for (int i = 0; i < Buffer.length / channalCount; i++) {
				count = 0;
				int data = 0;
				int bufferData = 0;
				// List<Integer> lineBufferList = null;
				while (count < checkedChannelIndexArray.length) {
					if (checkedChannelIndexArray[count] == 0) {
						if (SPLBufferArray.size() < count + 1) {
							SPLBufferArray.add(new int[1]);
						}
						count++;
						continue;
					} else {
						lastIndex = count;
					}
					int bufferindex = channalCount * i + count;
					bufferData = Buffer[bufferindex];
					if (SPLBufferArray.size() < count + 1) {
						SPLBufferArray.add(new int[Buffer.length / channalCount]);
					}
					SPLBufferArray.get(count)[xsize] = bufferData;
					count++;
				}
				xsize++;
			}
			int index = 0;
			while (index < checkedChannelIndexArray.length) {
				if (checkedChannelIndexArray[index] == 0) {
					if (SPLResultList.size() < index + 1) {
						SPLResultList.add(new double[1]);
					}
					index++;
					continue;
				}
				int[] dataArray = SPLBufferArray.get(index);
				spl.calculate(dataArray, dataArray.length);
				double[] SPLResult = spl.getResult();
				if (SPLResultList.size() < index + 1) {
					SPLResultList.add(SPLResult);
				} else {
					SPLResultList.set(index, SPLResult);
				}
				index++;
			}
			index = 0;
			for (int j = 0; j < SPLResultList.get(lastIndex).length; j++) {
				index = 0;
				while (index < checkedChannelIndexArray.length) {
					if (checkedChannelIndexArray[index] == 0) {
						index++;
						continue;
					}
					List<Double> lineList = SPLBuffer.get(index);
					double[] lineArray = SPLResultList.get(index);

					// //锟斤拷锟斤拷RPM转锟斤拷
					// if(xlabelState!=null&&xlabelState.equals("RPM")){
					// if(DataCollection.rpmdata==null){
					// return;
					// }
					// if(rpm==null){
					// rpm=new Arith_RPM();
					// }
					// rpm.InitTacho(32768);//锟斤拷锟斤拷实转锟斤拷通锟斤拷锟斤拷锟街猴拷锟睫改此诧拷锟斤拷瞬锟斤拷锟轿拷锟斤拷锟斤拷锟�
					// if(rpm.ifHaveCalcTachoResult(32768,DataCollection.rpmdata,DataCollection.rpmdata.length)){
					//// rpm.getRPM();
					// rpmRange=rpm.getRPMRange();
					// lineArray=rpm.getRPMSPLData(lineArray,1);//1锟斤拷锟斤拷锟饺★拷模锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷时锟斤拷锟斤拷锟斤拷锟斤拷知锟斤拷锟斤拷么锟斤拷
					// Log.v("bug11", rpmRange.length+"rpmRange.length");
					// Log.v("bug11", rpmData.length+"rpmData.length");
					// }
					// }
					// 锟斤拷锟�

					if (lineArray.length <= j) {
						index++;
						continue;
					}
					double data = lineArray[j];
					if (ylabelState != null && ylabelState.equals("Pa")) {
						// //////////// 16.3.8 锟斤拷维锟斤拷 -begin
						// TODO 锟斤拷锟� 通锟斤拷锟斤拷锟矫ｏ拷锟斤拷锟斤拷锟斤拷锟斤拷锟剿碉拷选锟斤拷0 = p0锟斤拷1 = a0锟斤拷锟斤拷应锟侥帮拷锟斤拷锟斤拷锟�2*p0锟斤拷锟斤拷
						// 锟斤拷锟斤拷证

						AnalogFragment.ViewHolder holder = AnalogFragment.checkedViewMap.get(index + 1);
						String physical = holder.Physical.getSelectedItem().toString();

						if ("Noise".equals(physical))
							data =  p0 * Math.pow(10, data / 20);
						else if ("Vibration".equals(physical))
							data = (2 * a0) * (Math.pow(10, (data / 20)));
						// /////////// -end
					}

					lineList.add(data);

					if (lineList.size() > (canvas.getWidth() - 50) / divider) {
						lineList.remove(0);
						changeX += 0.002;
					}
					index++;
				}
			}
			break;
		case 1:// 锟斤拷锟斤拷模式
			lastIndex = 0;
			// 锟斤拷锟斤拷
			spl.calculate(Buffer, Buffer.length);
			double[] SPLResult = spl.getResult();
			if (SPLResult != null) {
				List<Double> lineList = SPLBuffer.get(0);
				for (int j = 0; j < SPLResult.length; j++) {
					if (ylabelState == null) {
						lineList.add(SPLResult[j]);
					} else {
						if ("Pa".equals(ylabelState)) {
							double data_Pa = (2 * p0) * (Math.pow(10, (SPLResult[j] / 20)));

							lineList.add(data_Pa);
						} else {
							lineList.add(SPLResult[j]);
						}
					}
				}
				while (SPLBuffer.get(0).size() > (canvas.getWidth() - 50) / divider) {
					SPLBuffer.get(0).remove(0);
					changeX += offsetX;
				}
			}
			break;
		}
	}

	// 锟疥定之spl锟斤拷值锟斤拷锟斤拷
	public void setSPLPeakVauleHandler(Handler splPeakVauleHandler) {
		this.splPeakVauleHandler = splPeakVauleHandler;
	}

	public Handler getSPLPeakVauleHandler() {
		return this.splPeakVauleHandler;
	}

	private void setSplParamHandler() {
		splParamHandler = new Handler() {
			@Override
			public void handleMessage(Message msg) {
				if (voiceData != null && voiceData.length > 0) {
					return;
				}
				switch (msg.what) {
				case 0:
					spl.setAvarage(msg.arg1);
					break;
				case 1:
					spl.setWeighting(msg.arg1);
					break;
				}
			}
		};
		XclSingalTransfer xclSingalTransfer = XclSingalTransfer.getInstance();
		xclSingalTransfer.putValue("splParamHandler", splParamHandler);
	}

	// protected void onSizeChanged(int w, int h, int oldw, int oldh) {
	// if (viewPager != null) {
	// if (ruler == null) {
	// ruler = new Ruler(context,
	// ((RelativeLayout) getParent()).getHeight());
	// ((RelativeLayout) getParent()).addView(ruler);
	// } else {
	// ruler.setHeight(((RelativeLayout) getParent()).getHeight());
	// }
	// }
	// super.onSizeChanged(w, h, oldw, oldh);
	// }
	//
	// private String getUnit() {
	// return context.getSharedPreferences("hz_5D", 0).getString("SPL_XAxis",
	// "s");
	// }

	public void setCalibration(boolean value) {
		this.calibration = value;
	}
	@Override
	protected void yDataChange() {
		// TODO Auto-generated method stub
		if(YUNIT_SWITCH_MODE == 0) return;	
		else if(YUNIT_SWITCH_MODE == 2){   	  // pa 锟叫伙拷锟斤拷   db
			int listCount = SPLBuffer.size();
			ArrayList<List<Double>> lists = new ArrayList<List<Double>>();
			for(int i =0 ; i< listCount ;i++){
				List<Double> list= new ArrayList<Double>();
				
				Iterator<Double> it = SPLBuffer.get(i).iterator();
				while(it.hasNext()){
					double data = it.next();
					
					data=p0*(Math.pow(10, (data/ 20)));
					
					list.add(data);
				}
				lists.add(list);
			}
			
			SPLBuffer.clear();
			SPLBuffer = lists;
		}else {					// db 锟叫伙拷锟斤拷     pa

			int listCount = SPLBuffer.size();
			ArrayList<List<Double>> lists = new ArrayList<List<Double>>();
			for(int i =0 ; i< listCount ;i++){
				List<Double> list= new ArrayList<Double>();
				
				Iterator<Double> it = SPLBuffer.get(i).iterator();
				while(it.hasNext()){
					double data = it.next();
									  
					data=20*(Math.log10(data/p0)); 
					
					list.add(data);
				}
				lists.add(list);
			}
			
			SPLBuffer.clear();
			SPLBuffer = lists;
		}
		
	}
}
